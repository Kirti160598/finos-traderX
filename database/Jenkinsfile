pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "kirtigupta1234/finos-traderx:${BUILD_NUMBER}"
        GITOPS_REPO = "https://github.com/Kirti160598/finos-traderX.git"
        SONARQUBE_SERVER = "SonarQube"
        SONAR_PROJECT_NAME = "FinosTraderX"
        SONAR_PROJECT_VERSION = "${BUILD_NUMBER}"
        SONAR_TOKEN = "sqa_5893c6f02975c5ed496251434168aa4574294478"
    }
    stages {
        stage('Checkout App') {
            steps {
                git branch: 'main', url: 'https://github.com/Kirti160598/finos-traderX.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('database') {
                    sh 'docker build -t $DOCKER_IMAGE .'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(SONARQUBE_SERVER) {
                    script {
                        def scannerHome = tool 'DefaultSonarScanner'
                        def allServices = ['database', 'reference-data', 'trade-processor', 'trade-feed']
                        def selectedServices = params.SERVICES.tokenize(',')
                        if (selectedServices.contains('all')) {
                            selectedServices = allServices
                        }
                        selectedServices.each { service ->
                            echo "Running SonarQube analysis for ${service}"

                            def projectKey = "finos-traderX_${service}"
                            def projectBaseDir = "${service}"
                            bat """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=${projectKey} \
                                -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                                -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} \
                                -Dsonar.projectBaseDir=${projectBaseDir} \
                                -Dsonar.java.binaries=build/classes/java/main \
                                -Dsonar.login=${SONAR_TOKEN} \
                                -X
                            """
                        }
                    }
                }
            }
        }
     stage('Install Security Tools') {
        steps {
            bat '''
            pip install --user checkov
            set PATH=%PATH%;%USERPROFILE%\\AppData\\Roaming\\Python\\Python313\\Scripts 
        '''
    }
}
        stage('Scan Docker Image') {
            steps {
                bat 'trivy --version'
                bat 'trivy image --format json -o trivy-report.json $DOCKER_IMAGE'
    }
}
       stage('Run Compliance Checks') {
            steps {
                bat 'checkov -d . --output json > checkov-report.json'
    }
}

       stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }
        stage('Update GitOps Deployment YAML') {
            steps {
                dir('database') {
                    sh '''
                        echo "Current Directory: $(pwd)"
                        sed -i "s|image: .*|image: $DOCKER_IMAGE|" deployment.yaml
                        git add deployment.yaml
                        git commit -m "Update image to $DOCKER_IMAGE"
                        git push origin main
                    '''
                }
            }
        }
    }
}
